{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"E:/EcomersFullStack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Form,Button,Col}from\"react-bootstrap\";import{useDispatch,useSelector}from\"react-redux\";import{savePaymentMethod}from\"../actions/cartAction\";import CheckoutStep from\"../components/shared/CheckoutStep\";var PaymentScreen=function PaymentScreen(_ref){var history=_ref.history;var cart=useSelector(function(state){return state.cart;});var shippingAddress=cart.shippingAddress;if(!shippingAddress.address){history.push(\"/shipping\");}var dispatch=useDispatch();var _useState=useState(\"paypal\"),_useState2=_slicedToArray(_useState,2),paymentMethod=_useState2[0],setPaymentMethod=_useState2[1];var submitHandler=function submitHandler(e){e.preventDefault();dispatch(savePaymentMethod(paymentMethod));history.push(\"/placeorder\");};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckoutStep,{step1:true,step2:true,step3:true}),/*#__PURE__*/_jsx(\"h1\",{children:\"Payment Method\"}),/*#__PURE__*/_jsxs(Form,{onSubmit:submitHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{as:\"legend\",children:\"Select Payment Method\"}),/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Form.Check,{type:\"radio\",label:\"Paypal or Credit Card\",id:\"paypal\",name:\"paymentMethod\",value:\"paypal\",onChange:function onChange(e){return setPaymentMethod(e.target.value);}})})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"primary\",children:\"Continue\"})]})]});};export default PaymentScreen;","map":{"version":3,"sources":["E:/EcomersFullStack/frontend/src/screens/PaymentScreen.jsx"],"names":["React","useState","Form","Button","Col","useDispatch","useSelector","savePaymentMethod","CheckoutStep","PaymentScreen","history","cart","state","shippingAddress","address","push","dispatch","paymentMethod","setPaymentMethod","submitHandler","e","preventDefault","target","value"],"mappings":"gSAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,IAAT,CAAeC,MAAf,CAAuBC,GAAvB,KAAkC,iBAAlC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,iBAAT,KAAkC,uBAAlC,CACA,MAAOC,CAAAA,YAAP,KAAyB,mCAAzB,CACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CACrC,GAAMC,CAAAA,IAAI,CAAGL,WAAW,CAAC,SAACM,KAAD,QAAWA,CAAAA,KAAK,CAACD,IAAjB,EAAD,CAAxB,CADqC,GAE7BE,CAAAA,eAF6B,CAETF,IAFS,CAE7BE,eAF6B,CAGrC,GAAI,CAACA,eAAe,CAACC,OAArB,CAA8B,CAC5BJ,OAAO,CAACK,IAAR,CAAa,WAAb,EACD,CACD,GAAMC,CAAAA,QAAQ,CAAGX,WAAW,EAA5B,CANqC,cAOKJ,QAAQ,CAAC,QAAD,CAPb,wCAO9BgB,aAP8B,eAOfC,gBAPe,eAQrC,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,CAAD,CAAO,CAC3BA,CAAC,CAACC,cAAF,GACAL,QAAQ,CAACT,iBAAiB,CAACU,aAAD,CAAlB,CAAR,CACAP,OAAO,CAACK,IAAR,CAAa,aAAb,EACD,CAJD,CAKA,mBACE,wCACE,KAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,KAAK,KAAzB,CAA0B,KAAK,KAA/B,EADF,cAEE,sCAFF,cAGE,MAAC,IAAD,EAAM,QAAQ,CAAEI,aAAhB,wBACE,MAAC,IAAD,CAAM,KAAN,yBACE,KAAC,IAAD,CAAM,KAAN,EAAY,EAAE,CAAC,QAAf,mCADF,cAEE,KAAC,GAAD,wBACE,KAAC,IAAD,CAAM,KAAN,EACE,IAAI,CAAC,OADP,CAEE,KAAK,CAAC,uBAFR,CAGE,EAAE,CAAC,QAHL,CAIE,IAAI,CAAC,eAJP,CAKE,KAAK,CAAC,QALR,CAME,QAAQ,CAAE,kBAACC,CAAD,QAAOF,CAAAA,gBAAgB,CAACE,CAAC,CAACE,MAAF,CAASC,KAAV,CAAvB,EANZ,EADF,EAFF,GADF,cAcE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAC,SAA9B,sBAdF,GAHF,GADF,CAwBD,CArCD,CAuCA,cAAed,CAAAA,aAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { savePaymentMethod } from \"../actions/cartAction\";\nimport CheckoutStep from \"../components/shared/CheckoutStep\";\nconst PaymentScreen = ({ history }) => {\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress } = cart;\n  if (!shippingAddress.address) {\n    history.push(\"/shipping\");\n  }\n  const dispatch = useDispatch();\n  const [paymentMethod, setPaymentMethod] = useState(\"paypal\");\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(savePaymentMethod(paymentMethod));\n    history.push(\"/placeorder\");\n  };\n  return (\n    <>\n      <CheckoutStep step1 step2 step3 />\n      <h1>Payment Method</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group>\n          <Form.Label as=\"legend\">Select Payment Method</Form.Label>\n          <Col>\n            <Form.Check\n              type=\"radio\"\n              label=\"Paypal or Credit Card\"\n              id=\"paypal\"\n              name=\"paymentMethod\"\n              value=\"paypal\"\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            ></Form.Check>\n          </Col>\n        </Form.Group>\n        <Button type=\"submit\" variant=\"primary\">\n          Continue\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default PaymentScreen;\n"]},"metadata":{},"sourceType":"module"}